#!/usr/bin/env python3
"""
Test script f√∂r Google Calendar-integration med Alice AI-assistant
Testar alla calendar-funktioner och svenska spr√•kst√∂d
"""

import sys
import os
sys.path.append(os.path.dirname(__file__))

from core.calendar_service import calendar_service
from core.tool_registry import validate_and_execute_tool

def test_swedish_datetime_parsing():
    """Testa svenska datum/tid-parsning"""
    print("=== Testar svenska datum/tid-parsning ===")
    
    test_cases = [
        "imorgon kl 14:00",
        "fredag eftermiddag",
        "n√§sta m√•ndag morgon",
        "idag lunch",
        "p√• tisdag kl 16:30",
        "om 2 timmar",
        "n√§sta vecka torsdag kl 09:00"
    ]
    
    for test_case in test_cases:
        try:
            parsed = calendar_service._parse_swedish_datetime(test_case)
            print(f"‚úì '{test_case}' -> {parsed.strftime('%Y-%m-%d %H:%M')}")
        except Exception as e:
            print(f"‚úó '{test_case}' -> Fel: {str(e)}")

def test_conflict_detection():
    """Testa konfliktdetektering"""
    print("\n=== Testar konfliktdetektering ===")
    
    # Detta kommer att fungera endast om Google Calendar API √§r konfigurerat
    try:
        result = calendar_service.check_conflicts(
            "imorgon kl 10:00",
            "imorgon kl 11:00"
        )
        print(f"‚úì Konfliktkolning: {result['message']}")
        
        if result.get('suggestions'):
            print("F√∂rslag:")
            for suggestion in result['suggestions'][:2]:
                print(f"  - {suggestion['formatted']}")
                
    except Exception as e:
        print(f"‚úó Konfliktkolning misslyckades: {str(e)}")

def test_meeting_suggestions():
    """Testa m√∂tesf√∂rslag"""
    print("\n=== Testar intelligenta m√∂tesf√∂rslag ===")
    
    try:
        suggestions = calendar_service.suggest_meeting_times(
            duration_minutes=60,
            date_preference="imorgon"
        )
        
        if suggestions:
            print(f"‚úì Hittade {len(suggestions)} f√∂rslag:")
            for i, suggestion in enumerate(suggestions[:3], 1):
                confidence = int(suggestion['confidence'] * 100)
                print(f"  {i}. {suggestion['formatted']} (f√∂rtroende: {confidence}%)")
        else:
            print("‚úì Inga f√∂rslag hittades (tom kalender eller ingen internetanslutning)")
            
    except Exception as e:
        print(f"‚úó M√∂tesf√∂rslag misslyckades: {str(e)}")

def test_tool_integration():
    """Testa verktygsintegration"""
    print("\n=== Testar verktygsintegration ===")
    
    test_tools = [
        {
            "name": "LIST_CALENDAR_EVENTS",
            "args": {"max_results": 5}
        },
        {
            "name": "SUGGEST_MEETING_TIMES", 
            "args": {"duration_minutes": 30, "date_preference": "imorgon"}
        },
        {
            "name": "CHECK_CALENDAR_CONFLICTS",
            "args": {"start_time": "imorgon kl 15:00", "end_time": "imorgon kl 16:00"}
        }
    ]
    
    for tool_test in test_tools:
        try:
            result = validate_and_execute_tool(tool_test["name"], tool_test["args"])
            if result.get("ok"):
                print(f"‚úì {tool_test['name']}: {result['message'][:100]}...")
            else:
                print(f"‚úó {tool_test['name']}: {result.get('message', 'Ok√§nt fel')}")
        except Exception as e:
            print(f"‚úó {tool_test['name']}: Fel - {str(e)}")

def test_voice_command_parsing():
    """Testa parsing av r√∂stkommandon"""
    print("\n=== Testar parsing av svenska r√∂stkommandon ===")
    
    # Detta skulle beh√∂va frontend calendar service f√∂r fullst√§ndig testning
    # Men vi kan testa grundl√§ggande m√∂nster h√§r
    
    voice_commands = [
        "skapa m√∂te imorgon kl 14:00",
        "boka tid f√∂r tandl√§kare p√• fredag",
        "visa mina m√∂ten denna vecka", 
        "s√∂k efter m√∂te med Jonas",
        "n√§r har jag lunch imorgon",
        "f√∂resl√• m√∂testider n√§sta vecka"
    ]
    
    for command in voice_commands:
        # Simulera enkel parsing
        if any(keyword in command.lower() for keyword in ['skapa', 'boka', 'l√§gg till']):
            print(f"‚úì '{command}' -> CREATE_CALENDAR_EVENT")
        elif any(keyword in command.lower() for keyword in ['visa', 'lista', 'vad har jag']):
            print(f"‚úì '{command}' -> LIST_CALENDAR_EVENTS")
        elif any(keyword in command.lower() for keyword in ['s√∂k', 'hitta', 'leta']):
            print(f"‚úì '{command}' -> SEARCH_CALENDAR_EVENTS")
        elif any(keyword in command.lower() for keyword in ['f√∂resl√•', 'lediga tider']):
            print(f"‚úì '{command}' -> SUGGEST_MEETING_TIMES")
        else:
            print(f"? '{command}' -> Ok√§nt kommando")

def main():
    """K√∂r alla tester"""
    print("üìÖ ALICE CALENDAR INTEGRATION - TESTRESULTAT")
    print("=" * 50)
    
    try:
        test_swedish_datetime_parsing()
        test_conflict_detection()
        test_meeting_suggestions()
        test_tool_integration()
        test_voice_command_parsing()
        
        print("\n" + "=" * 50)
        print("‚úÖ ALLA TESTER SLUTF√ñRDA")
        print("\nNotera: Vissa funktioner kr√§ver konfigurerad Google Calendar API.")
        print("Se CALENDAR_SETUP.md f√∂r instruktioner.")
        
    except KeyboardInterrupt:
        print("\n‚ùå Testning avbruten av anv√§ndare")
    except Exception as e:
        print(f"\n‚ùå Ov√§ntat fel under testning: {str(e)}")

if __name__ == "__main__":
    main()