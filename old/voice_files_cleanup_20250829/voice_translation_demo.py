#!/usr/bin/env python3
"""
üéôÔ∏è Alice Voice Pipeline - Translation Demo
Visar att svensk‚Üíengelsk √∂vers√§ttning fungerar perfekt!
"""

import sys
import asyncio
import time
from pathlib import Path

# Add server to path
sys.path.append('server')

from server.voice.input_processor import InputProcessor
from server.voice.orchestrator import VoiceOrchestrator

class TranslationDemo:
    """Demo som visar perfekt svensk‚Üíengelsk √∂vers√§ttning"""
    
    def __init__(self):
        self.input_processor = InputProcessor()
        self.orchestrator = VoiceOrchestrator()
        self.results = []
    
    async def test_translation(self, name: str, source_type: str, swedish_text: str):
        """Test en enskild √∂vers√§ttning"""
        
        print(f"\nüß™ {name}")
        print(f"üì± K√§lla: {source_type}")
        print(f"üá∏üá™ Svenska: '{swedish_text}'")
        
        start_time = time.time()
        
        try:
            # Process input
            if source_type == "chat":
                input_pkg = self.input_processor.process_chat(swedish_text)
            elif source_type == "email":
                input_pkg = self.input_processor.process_email("Test", swedish_text)  
            elif source_type == "calendar":
                input_pkg = self.input_processor.process_calendar("Event", "imorgon", swedish_text)
            else:
                input_pkg = self.input_processor.process_notification(swedish_text)
            
            # Translate
            voice_output = await self.orchestrator.process(input_pkg)
            duration = time.time() - start_time
            
            # Check result
            if voice_output.meta.get("fallback", False):
                print(f"‚ùå FALLBACK: {voice_output.speak_text_en}")
                print(f"   Error: {voice_output.meta.get('error', 'Unknown')}")
                success = False
            else:
                print(f"üá¨üáß English: '{voice_output.speak_text_en}'")
                print(f"‚ö° Latency: {duration:.2f}s")
                print(f"üé≠ Style: {voice_output.style} | Rate: {voice_output.rate}x")
                success = True
            
            self.results.append({
                "name": name,
                "success": success,
                "duration": duration,
                "english": voice_output.speak_text_en
            })
            
            return success
            
        except Exception as e:
            print(f"‚ùå ERROR: {e}")
            self.results.append({
                "name": name, 
                "success": False,
                "duration": time.time() - start_time,
                "error": str(e)
            })
            return False
    
    async def run_demo(self):
        """K√∂r alla demo-test"""
        
        print("üéôÔ∏è Alice Voice Pipeline - Translation Demo")
        print("=" * 55)
        print("Demonstrerar perfekt svensk‚Üíengelsk √∂vers√§ttning!")
        
        # Demo test cases
        test_cases = [
            ("Vardaglig h√§lsning", "chat", "Hej Alice, hur m√•r du idag?"),
            ("Tacks√§gelse", "chat", "Tack s√• mycket f√∂r hj√§lpen!"),
            ("Tidsfr√•ga", "chat", "Vad √§r klockan nu?"),
            ("Hj√§lpbeg√§ran", "chat", "Jag beh√∂ver hj√§lp med datorn"),
            
            ("M√∂tesf√∂rfr√•gan", "email", "Kan vi ses imorgon f√∂r att diskutera projektet?"),
            ("Svenskt namn", "chat", "Anna-Lena kommer till middag imorgon"),
            ("Svenska platser", "chat", "Jag √•ker fr√•n Stockholm till G√∂teborg"),
            
            ("Batterivarning", "notification", "Batteri l√•gt - 15% kvar"),
            ("Systemuppdatering", "notification", "Ny uppdatering tillg√§nglig f√∂r installation"),
            
            ("Tandl√§karbokning", "calendar", "Tandl√§kare p√• m√•ndag kl 15:30"),
        ]
        
        successful = 0
        total = len(test_cases)
        
        for name, source_type, text in test_cases:
            if await self.test_translation(name, source_type, text):
                successful += 1
            
            # Kort paus mellan tester  
            await asyncio.sleep(0.3)
        
        # Sammanfattning
        print("\n" + "=" * 55)
        print("üéØ DEMO RESULTAT")
        print("=" * 55)
        
        success_rate = (successful / total * 100)
        print(f"‚úÖ Lyckade: {successful}/{total} ({success_rate:.1f}%)")
        
        if self.results:
            durations = [r["duration"] for r in self.results if r["success"]]
            if durations:
                avg_time = sum(durations) / len(durations)
                print(f"‚ö° Genomsnittlig tid: {avg_time:.2f}s")
        
        print(f"\nüìã √ñVERS√ÑTTNINGSEXEMPEL:")
        for result in self.results:
            if result["success"]:
                print(f"  ‚Ä¢ {result['name']}: '{result['english']}'")
        
        print(f"\nüéâ SLUTSATS:")
        if success_rate >= 80:
            print("  ‚úÖ SVENSK‚ÜíENGELSK √ñVERS√ÑTTNING FUNGERAR PERFEKT!")
            print("  üéôÔ∏è Redo f√∂r TTS-integration n√§r API-nyckel finns")
        else:
            print("  ‚ö†Ô∏è  √ñvers√§ttning beh√∂ver finjustering")
        
        return success_rate >= 80

async def main():
    """Huvudfunktion"""
    
    print("Initialiserar Alice Voice Pipeline...")
    demo = TranslationDemo()
    
    try:
        # Test Ollama connection
        health = await demo.orchestrator.llm.health()
        if not health.ok:
            print(f"‚ùå Ollama connection failed: {health.error}")
            return False
        
        print(f"‚úÖ Ollama connected (TTFT: {health.tftt_ms:.0f}ms)")
        print("üöÄ Starting translation demo...\n")
        
        # Run demo
        success = await demo.run_demo()
        return success
        
    except Exception as e:
        print(f"‚ùå Demo failed: {e}")
        return False

if __name__ == "__main__":
    try:
        success = asyncio.run(main())
        print(f"\nDemo result: {'‚úÖ SUCCESS' if success else '‚ùå FAILED'}")
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n\nDemo avbrutet av anv√§ndare")
        sys.exit(1)
    except Exception as e:
        print(f"\nDemo kraschade: {e}")
        sys.exit(1)