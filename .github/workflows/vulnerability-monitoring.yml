# Continuous Vulnerability Monitoring
# Automated monitoring and alerting for security vulnerabilities

name: Vulnerability Monitoring

on:
  schedule:
    # Run every 6 hours to catch new vulnerabilities quickly
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      alert_threshold:
        description: 'Minimum severity for alerts (low, medium, high, critical)'
        required: false
        default: 'medium'
        type: choice
        options:
          - low
          - medium
          - high
          - critical
  repository_dispatch:
    types: [vulnerability-check]

permissions:
  contents: read
  security-events: write
  issues: write
  actions: read

env:
  ALERT_THRESHOLD: ${{ github.event.inputs.alert_threshold || 'medium' }}

jobs:
  vulnerability-scan:
    runs-on: ubuntu-latest
    name: Continuous Vulnerability Scanning
    
    outputs:
      critical-count: ${{ steps.analyze.outputs.critical-count }}
      high-count: ${{ steps.analyze.outputs.high-count }}
      medium-count: ${{ steps.analyze.outputs.medium-count }}
      total-count: ${{ steps.analyze.outputs.total-count }}
      new-vulnerabilities: ${{ steps.analyze.outputs.new-vulnerabilities }}
      alert-required: ${{ steps.analyze.outputs.alert-required }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install monitoring tools
        run: |
          # Install vulnerability scanning tools
          pip install safety pip-audit cyclonedx-bom
          npm install -g audit-ci retire @cyclonedx/cyclonedx-npm
          
          # Install Syft and Grype for SBOM and vulnerability scanning
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Install dependencies
        run: |
          # Python dependencies
          cd server
          pip install -r requirements.txt
          cd ..
          
          # Node.js dependencies
          cd web && npm ci
          cd ../alice-tools && npm ci
          cd ../nlu-agent && npm ci
          cd ../tools && npm ci
          cd ..

      - name: Run comprehensive vulnerability scan
        run: |
          mkdir -p vulnerability-reports
          
          echo "🔍 Starting comprehensive vulnerability scan..."
          
          # Python vulnerability scans
          echo "Scanning Python dependencies..."
          cd server
          
          # Safety scan
          safety check --json > ../vulnerability-reports/safety-latest.json 2>/dev/null || echo "Safety scan completed with issues"
          safety check > ../vulnerability-reports/safety-latest.txt 2>/dev/null || echo "Safety scan completed with issues"
          
          # pip-audit scan
          pip-audit --format=json --output=../vulnerability-reports/pip-audit-latest.json 2>/dev/null || echo "pip-audit completed with issues"
          pip-audit > ../vulnerability-reports/pip-audit-latest.txt 2>/dev/null || echo "pip-audit completed with issues"
          
          cd ..
          
          # Node.js vulnerability scans
          echo "Scanning Node.js dependencies..."
          
          # Web frontend
          cd web
          npm audit --audit-level low --json > ../vulnerability-reports/npm-audit-web-latest.json 2>/dev/null || echo "Web audit completed"
          audit-ci --moderate > ../vulnerability-reports/audit-ci-web-latest.txt 2>/dev/null || echo "Web audit-ci completed"
          cd ..
          
          # Alice tools
          cd alice-tools
          npm audit --audit-level low --json > ../vulnerability-reports/npm-audit-tools-latest.json 2>/dev/null || echo "Tools audit completed"
          cd ..
          
          # NLU agent
          cd nlu-agent
          npm audit --audit-level low --json > ../vulnerability-reports/npm-audit-nlu-latest.json 2>/dev/null || echo "NLU audit completed"
          cd ..
          
          # Debug tools
          cd tools
          npm audit --audit-level low --json > ../vulnerability-reports/npm-audit-debug-latest.json 2>/dev/null || echo "Debug tools audit completed"
          cd ..

      - name: Generate vulnerability database
        run: |
          cat > create_vuln_db.py << 'EOF'
          import json
          import os
          from datetime import datetime, timezone
          import hashlib
          
          def load_json_safe(file_path):
              try:
                  with open(file_path, 'r') as f:
                      return json.load(f)
              except (FileNotFoundError, json.JSONDecodeError):
                  return {}
          
          def extract_vulnerabilities():
              vulnerabilities = []
              timestamp = datetime.now(timezone.utc).isoformat()
              
              # Safety vulnerabilities
              safety_data = load_json_safe('vulnerability-reports/safety-latest.json')
              for vuln in safety_data.get('vulnerabilities', []):
                  vulnerabilities.append({
                      'id': vuln.get('id', 'unknown'),
                      'source': 'safety',
                      'package': vuln.get('package_name', 'unknown'),
                      'version': vuln.get('analyzed_version', 'unknown'),
                      'severity': vuln.get('severity', 'unknown'),
                      'title': vuln.get('advisory', 'No title'),
                      'description': vuln.get('advisory', 'No description')[:500],
                      'cve': vuln.get('cve', None),
                      'timestamp': timestamp,
                      'hash': hashlib.md5(f"{vuln.get('id')}-{vuln.get('package_name')}".encode()).hexdigest()
                  })
              
              # pip-audit vulnerabilities
              pip_audit_data = load_json_safe('vulnerability-reports/pip-audit-latest.json')
              for vuln in pip_audit_data.get('vulnerabilities', []):
                  vulnerabilities.append({
                      'id': vuln.get('id', 'unknown'),
                      'source': 'pip-audit',
                      'package': vuln.get('package', {}).get('name', 'unknown'),
                      'version': vuln.get('package', {}).get('version', 'unknown'),
                      'severity': 'unknown',
                      'title': vuln.get('description', 'No title')[:100],
                      'description': vuln.get('description', 'No description')[:500],
                      'cve': vuln.get('id', None),
                      'timestamp': timestamp,
                      'hash': hashlib.md5(f"{vuln.get('id')}-{vuln.get('package', {}).get('name')}".encode()).hexdigest()
                  })
              
              # NPM audit vulnerabilities
              npm_files = [
                  'npm-audit-web-latest.json',
                  'npm-audit-tools-latest.json',
                  'npm-audit-nlu-latest.json',
                  'npm-audit-debug-latest.json'
              ]
              
              for npm_file in npm_files:
                  npm_data = load_json_safe(f'vulnerability-reports/{npm_file}')
                  component = npm_file.replace('npm-audit-', '').replace('-latest.json', '')
                  
                  for vuln_id, vuln in npm_data.get('advisories', {}).items():
                      vulnerabilities.append({
                          'id': vuln_id,
                          'source': f'npm-{component}',
                          'package': vuln.get('module_name', 'unknown'),
                          'version': vuln.get('vulnerable_versions', 'unknown'),
                          'severity': vuln.get('severity', 'unknown'),
                          'title': vuln.get('title', 'No title'),
                          'description': vuln.get('overview', 'No description')[:500],
                          'cve': vuln.get('cves', [None])[0],
                          'timestamp': timestamp,
                          'hash': hashlib.md5(f"{vuln_id}-{vuln.get('module_name')}".encode()).hexdigest()
                      })
              
              return vulnerabilities
          
          def analyze_vulnerabilities(vulns):
              counts = {'critical': 0, 'high': 0, 'medium': 0, 'low': 0, 'unknown': 0}
              
              for vuln in vulns:
                  severity = vuln.get('severity', 'unknown').lower()
                  if severity in counts:
                      counts[severity] += 1
                  else:
                      counts['unknown'] += 1
              
              return counts
          
          def compare_with_previous(current_vulns):
              # Load previous scan if it exists
              try:
                  with open('vulnerability-reports/previous-scan.json', 'r') as f:
                      previous_data = json.load(f)
                  previous_hashes = set(v.get('hash') for v in previous_data.get('vulnerabilities', []))
              except FileNotFoundError:
                  previous_hashes = set()
              
              current_hashes = set(v.get('hash') for v in current_vulns)
              new_vulns = [v for v in current_vulns if v.get('hash') not in previous_hashes]
              resolved_hashes = previous_hashes - current_hashes
              
              return new_vulns, len(resolved_hashes)
          
          if __name__ == "__main__":
              vulnerabilities = extract_vulnerabilities()
              counts = analyze_vulnerabilities(vulnerabilities)
              new_vulns, resolved_count = compare_with_previous(vulnerabilities)
              
              total_count = sum(counts.values())
              new_count = len(new_vulns)
              
              # Save current scan for future comparison
              scan_data = {
                  'timestamp': datetime.now(timezone.utc).isoformat(),
                  'total_count': total_count,
                  'counts': counts,
                  'new_count': new_count,
                  'resolved_count': resolved_count,
                  'vulnerabilities': vulnerabilities,
                  'new_vulnerabilities': new_vulns
              }
              
              with open('vulnerability-reports/current-scan.json', 'w') as f:
                  json.dump(scan_data, f, indent=2)
              
              # Copy current to previous for next run
              with open('vulnerability-reports/previous-scan.json', 'w') as f:
                  json.dump(scan_data, f, indent=2)
              
              # Output for GitHub Actions
              print(f"::set-output name=total-count::{total_count}")
              print(f"::set-output name=critical-count::{counts['critical']}")
              print(f"::set-output name=high-count::{counts['high']}")
              print(f"::set-output name=medium-count::{counts['medium']}")
              print(f"::set-output name=new-vulnerabilities::{new_count}")
              
              # Determine if alert is required based on threshold
              threshold = os.environ.get('ALERT_THRESHOLD', 'medium').lower()
              alert_required = False
              
              if threshold == 'critical' and counts['critical'] > 0:
                  alert_required = True
              elif threshold == 'high' and (counts['critical'] > 0 or counts['high'] > 0):
                  alert_required = True
              elif threshold == 'medium' and (counts['critical'] > 0 or counts['high'] > 0 or counts['medium'] > 0):
                  alert_required = True
              elif threshold == 'low' and total_count > 0:
                  alert_required = True
              
              print(f"::set-output name=alert-required::{str(alert_required).lower()}")
              
              # Generate summary report
              with open('vulnerability-summary.txt', 'w') as f:
                  f.write(f"Alice AI Assistant - Vulnerability Monitoring Report\n")
                  f.write(f"="*50 + "\n\n")
                  f.write(f"Scan Time: {scan_data['timestamp']}\n")
                  f.write(f"Total Vulnerabilities: {total_count}\n")
                  f.write(f"New Vulnerabilities: {new_count}\n")
                  f.write(f"Resolved Vulnerabilities: {resolved_count}\n\n")
                  f.write(f"Severity Breakdown:\n")
                  f.write(f"- Critical: {counts['critical']}\n")
                  f.write(f"- High: {counts['high']}\n")
                  f.write(f"- Medium: {counts['medium']}\n")
                  f.write(f"- Low: {counts['low']}\n")
                  f.write(f"- Unknown: {counts['unknown']}\n\n")
                  
                  if new_vulns:
                      f.write(f"New Vulnerabilities ({new_count}):\n")
                      f.write("-" * 30 + "\n")
                      for vuln in new_vulns[:10]:  # Show top 10
                          f.write(f"• {vuln['package']} ({vuln['version']})\n")
                          f.write(f"  ID: {vuln['id']} | Severity: {vuln['severity']}\n")
                          f.write(f"  {vuln['title']}\n\n")
                      if len(new_vulns) > 10:
                          f.write(f"... and {len(new_vulns) - 10} more\n")
          EOF
          
          python create_vuln_db.py

      - name: Analyze vulnerability trends
        id: analyze
        run: |
          # Read outputs from Python script
          if [ -f "vulnerability-reports/current-scan.json" ]; then
            TOTAL_COUNT=$(jq -r '.total_count' vulnerability-reports/current-scan.json)
            CRITICAL_COUNT=$(jq -r '.counts.critical' vulnerability-reports/current-scan.json)
            HIGH_COUNT=$(jq -r '.counts.high' vulnerability-reports/current-scan.json)
            MEDIUM_COUNT=$(jq -r '.counts.medium' vulnerability-reports/current-scan.json)
            NEW_COUNT=$(jq -r '.new_count' vulnerability-reports/current-scan.json)
            
            echo "total-count=$TOTAL_COUNT" >> $GITHUB_OUTPUT
            echo "critical-count=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
            echo "high-count=$HIGH_COUNT" >> $GITHUB_OUTPUT
            echo "medium-count=$MEDIUM_COUNT" >> $GITHUB_OUTPUT
            echo "new-vulnerabilities=$NEW_COUNT" >> $GITHUB_OUTPUT
            
            # Determine alert requirement
            ALERT_REQUIRED="false"
            case "${{ env.ALERT_THRESHOLD }}" in
              "critical")
                if [ "$CRITICAL_COUNT" -gt 0 ]; then ALERT_REQUIRED="true"; fi
                ;;
              "high")
                if [ "$CRITICAL_COUNT" -gt 0 ] || [ "$HIGH_COUNT" -gt 0 ]; then ALERT_REQUIRED="true"; fi
                ;;
              "medium")
                if [ "$CRITICAL_COUNT" -gt 0 ] || [ "$HIGH_COUNT" -gt 0 ] || [ "$MEDIUM_COUNT" -gt 0 ]; then ALERT_REQUIRED="true"; fi
                ;;
              "low")
                if [ "$TOTAL_COUNT" -gt 0 ]; then ALERT_REQUIRED="true"; fi
                ;;
            esac
            
            echo "alert-required=$ALERT_REQUIRED" >> $GITHUB_OUTPUT
          else
            echo "No vulnerability data found"
            echo "total-count=0" >> $GITHUB_OUTPUT
            echo "critical-count=0" >> $GITHUB_OUTPUT
            echo "high-count=0" >> $GITHUB_OUTPUT
            echo "medium-count=0" >> $GITHUB_OUTPUT
            echo "new-vulnerabilities=0" >> $GITHUB_OUTPUT
            echo "alert-required=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload vulnerability reports
        uses: actions/upload-artifact@v4
        with:
          name: vulnerability-monitoring-${{ github.run_number }}
          path: |
            vulnerability-reports/
            vulnerability-summary.txt
          retention-days: 30

      - name: Update vulnerability database
        run: |
          # Create a persistent vulnerability tracking file
          mkdir -p .github/vulnerability-tracking
          
          if [ -f "vulnerability-reports/current-scan.json" ]; then
            cp vulnerability-reports/current-scan.json .github/vulnerability-tracking/latest-scan.json
            
            # Create historical log entry
            echo "$(date -u +"%Y-%m-%d %H:%M:%S UTC"): Total: ${{ steps.analyze.outputs.total-count }}, Critical: ${{ steps.analyze.outputs.critical-count }}, High: ${{ steps.analyze.outputs.high-count }}, Medium: ${{ steps.analyze.outputs.medium-count }}, New: ${{ steps.analyze.outputs.new-vulnerabilities }}" >> .github/vulnerability-tracking/vulnerability-history.log
          fi

  alert-management:
    runs-on: ubuntu-latest
    name: Vulnerability Alert Management
    needs: vulnerability-scan
    if: needs.vulnerability-scan.outputs.alert-required == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download vulnerability reports
        uses: actions/download-artifact@v4
        with:
          name: vulnerability-monitoring-${{ github.run_number }}

      - name: Create security issue
        if: needs.vulnerability-scan.outputs.new-vulnerabilities > 0
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const criticalCount = '${{ needs.vulnerability-scan.outputs.critical-count }}';
            const highCount = '${{ needs.vulnerability-scan.outputs.high-count }}';
            const mediumCount = '${{ needs.vulnerability-scan.outputs.medium-count }}';
            const totalCount = '${{ needs.vulnerability-scan.outputs.total-count }}';
            const newCount = '${{ needs.vulnerability-scan.outputs.new-vulnerabilities }}';
            
            let summary = '';
            try {
              summary = fs.readFileSync('vulnerability-summary.txt', 'utf8');
            } catch (error) {
              summary = 'Could not read vulnerability summary.';
            }
            
            const priorityLevel = criticalCount > 0 ? 'CRITICAL' : (highCount > 0 ? 'HIGH' : 'MEDIUM');
            const labels = ['security', 'vulnerability', 'monitoring'];
            
            if (criticalCount > 0) labels.push('critical');
            if (highCount > 0) labels.push('high-priority');
            
            const issueBody = `## 🚨 Vulnerability Alert - ${priorityLevel} Priority
            
            **Alert triggered by:** Continuous vulnerability monitoring
            **Scan Time:** ${new Date().toISOString()}
            **Threshold:** ${{ env.ALERT_THRESHOLD }}
            
            ### Summary
            - **Total Vulnerabilities:** ${totalCount}
            - **Critical:** ${criticalCount}
            - **High:** ${highCount}
            - **Medium:** ${mediumCount}
            - **New Vulnerabilities:** ${newCount}
            
            ### Action Required
            ${criticalCount > 0 ? '🔴 **IMMEDIATE ACTION REQUIRED** - Critical vulnerabilities detected!' : ''}
            ${highCount > 0 ? '🟡 **High priority vulnerabilities** - Review and remediate within 24 hours' : ''}
            
            - [ ] Review detailed vulnerability report in workflow artifacts
            - [ ] Assess impact on Alice AI Assistant
            - [ ] Create remediation plan
            - [ ] Update dependencies to patched versions
            - [ ] Test fixes in development environment
            - [ ] Deploy security patches to production
            - [ ] Verify vulnerabilities are resolved
            
            ### Detailed Report
            <details>
            <summary>Click to expand vulnerability details</summary>
            
            \`\`\`
            ${summary}
            \`\`\`
            
            </details>
            
            ### Resources
            - [Vulnerability Monitoring Workflow](${context.payload.repository.html_url}/actions/workflows/vulnerability-monitoring.yml)
            - [Security Documentation](${context.payload.repository.html_url}/blob/main/SECURITY.md)
            - [Dependency Management](${context.payload.repository.html_url}/blob/main/.github/dependabot.yml)
            
            ---
            *This issue was automatically created by the Alice AI vulnerability monitoring system.*
            `;
            
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Security Alert: ${newCount} new vulnerabilities detected (${priorityLevel})`,
              body: issueBody,
              labels: labels,
              assignees: ['evil']
            });
            
            console.log(`Created security issue: ${issue.data.html_url}`);

      - name: Send Slack notification (if configured)
        if: needs.vulnerability-scan.outputs.critical-count > 0 && env.SLACK_WEBHOOK_URL
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_SECURITY_WEBHOOK }}
        run: |
          if [ -n "$SLACK_WEBHOOK_URL" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data "{
                \"text\": \"🚨 CRITICAL Security Alert: Alice AI Assistant\",
                \"attachments\": [
                  {
                    \"color\": \"danger\",
                    \"fields\": [
                      {
                        \"title\": \"Critical Vulnerabilities\",
                        \"value\": \"${{ needs.vulnerability-scan.outputs.critical-count }}\",
                        \"short\": true
                      },
                      {
                        \"title\": \"High Vulnerabilities\",
                        \"value\": \"${{ needs.vulnerability-scan.outputs.high-count }}\",
                        \"short\": true
                      },
                      {
                        \"title\": \"New Vulnerabilities\",
                        \"value\": \"${{ needs.vulnerability-scan.outputs.new-vulnerabilities }}\",
                        \"short\": true
                      },
                      {
                        \"title\": \"Action\",
                        \"value\": \"Immediate review required\",
                        \"short\": true
                      }
                    ]
                  }
                ]
              }" \
              $SLACK_WEBHOOK_URL
          fi

  reporting:
    runs-on: ubuntu-latest
    name: Vulnerability Reporting & Metrics
    needs: vulnerability-scan
    if: always()
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download vulnerability reports
        uses: actions/download-artifact@v4
        with:
          name: vulnerability-monitoring-${{ github.run_number }}

      - name: Generate metrics dashboard
        run: |
          cat > vulnerability-metrics.json << EOF
          {
            "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "commit": "${{ github.sha }}",
            "total_vulnerabilities": ${{ needs.vulnerability-scan.outputs.total-count }},
            "critical_vulnerabilities": ${{ needs.vulnerability-scan.outputs.critical-count }},
            "high_vulnerabilities": ${{ needs.vulnerability-scan.outputs.high-count }},
            "medium_vulnerabilities": ${{ needs.vulnerability-scan.outputs.medium-count }},
            "new_vulnerabilities": ${{ needs.vulnerability-scan.outputs.new-vulnerabilities }},
            "alert_threshold": "${{ env.ALERT_THRESHOLD }}",
            "alert_required": ${{ needs.vulnerability-scan.outputs.alert-required }}
          }
          EOF

      - name: Update README vulnerability badge (if configured)
        if: github.ref == 'refs/heads/main'
        run: |
          # Create vulnerability status badge data
          TOTAL=${{ needs.vulnerability-scan.outputs.total-count }}
          CRITICAL=${{ needs.vulnerability-scan.outputs.critical-count }}
          HIGH=${{ needs.vulnerability-scan.outputs.high-count }}
          
          if [ "$CRITICAL" -gt 0 ]; then
            BADGE_STATUS="critical-$TOTAL-red"
          elif [ "$HIGH" -gt 0 ]; then
            BADGE_STATUS="high-$TOTAL-orange"
          elif [ "$TOTAL" -gt 0 ]; then
            BADGE_STATUS="vulnerabilities-$TOTAL-yellow"
          else
            BADGE_STATUS="secure-0-green"
          fi
          
          echo "Vulnerability badge status: $BADGE_STATUS"
          echo "BADGE_STATUS=$BADGE_STATUS" >> $GITHUB_ENV

      - name: Commit vulnerability tracking data
        if: github.ref == 'refs/heads/main'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Only commit if there are changes
          if [ -f ".github/vulnerability-tracking/latest-scan.json" ]; then
            git add .github/vulnerability-tracking/
            git diff --staged --quiet || git commit -m "🔍 Update vulnerability tracking data
            
            Total: ${{ needs.vulnerability-scan.outputs.total-count }}
            Critical: ${{ needs.vulnerability-scan.outputs.critical-count }}
            High: ${{ needs.vulnerability-scan.outputs.high-count }}
            Medium: ${{ needs.vulnerability-scan.outputs.medium-count }}
            New: ${{ needs.vulnerability-scan.outputs.new-vulnerabilities }}
            
            🤖 Generated with [Claude Code](https://claude.ai/code)
            
            Co-Authored-By: Claude <noreply@anthropic.com>"
            
            git push
          fi

      - name: Upload final metrics
        uses: actions/upload-artifact@v4
        with:
          name: vulnerability-metrics-${{ github.run_number }}
          path: vulnerability-metrics.json
          retention-days: 365  # Keep metrics for a year